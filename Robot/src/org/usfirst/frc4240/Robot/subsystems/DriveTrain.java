// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4240.Robot.subsystems;

import org.usfirst.frc4240.Robot.OI;
import org.usfirst.frc4240.Robot.Robot;
import org.usfirst.frc4240.Robot.RobotMap;
import org.usfirst.frc4240.Robot.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.*;
import com.kauailabs.navx.frc.AHRS;


/**
 *
 */
public class driveTrain extends Subsystem {
	
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon rightFrontMotor = RobotMap.driveTrainRightFrontMotor;
    private final CANTalon rightRearMotor = RobotMap.driveTrainRightRearMotor;
    private final CANTalon leftFrontMotor = RobotMap.driveTrainLeftFrontMotor;
    private final CANTalon leftRearMotor = RobotMap.driveTrainLeftRearMotor;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    private final Encoder quadratureEncoder1 = RobotMap.driveTrainQuadratureEncoder1;
    private final Ultrasonic frontUltrasonic = RobotMap.driveTrainfrontUltrasonic;
    private final Ultrasonic rearUltrasonic = RobotMap.driveTrainrearUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final AHRS  navx = RobotMap.driveTrainNavX;
        
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoyStick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	}   
    
    	public driveTrain(){
            navx.reset();  //Resets gyro once so field relative has one 'true' North direction         
    	}
    	
    	public void takeJoystickInputs(double left, double right) {
  	   		          	 	 
	    	robotDrive.arcadeDrive(org.usfirst.frc4240.Robot.Robot.oi.logitech);
			//robotDrive.tankDrive(Robot.oi.logitech.getRawAxis(1), Robot.oi.logitech.getRawAxis(5));
			//robotDrive.arcadeDrive(Robot.oi.logitech.getRawAxis(1), Robot.oi.logitech.getRawAxis(5));
	}
    
    	public void stop() {
    		robotDrive.arcadeDrive(0, 0);
    	}
    	
    	 // Method to reset the gyro
        public void resetGyro(){
        	navx.reset();
        }
        
        // Returns the gyro angle
        public double getGyroAngle(){
        	return(navx.getAngle());
        }
	
        // Returns front ultrasonic measurement
    	public double getFrontDistance(){
    		double checkFrontDistance = frontUltrasonic.getRangeInches();
    		double returnDistance;
    		
    		if(checkFrontDistance > 401){
    			returnDistance = 400;
    		} else if(checkFrontDistance < 3){
    			returnDistance = 0;
    		} else {
    			returnDistance = checkFrontDistance;
    		}
    		return(returnDistance);
    	}
    	
    	// Returns rear ultrasonic measurement
    	public double getRearDistance(){
    		double checkRearDistance = rearUltrasonic.getRangeInches();
    		double returnDistance;
    		
    		if(checkRearDistance > 401){
    			returnDistance = 400;
    		} else if(checkRearDistance < 3){
    			returnDistance = 0;
    		} else {
    			returnDistance = checkRearDistance;
    		}
    		return(returnDistance);
    	}
	
}

